package main

import (
	"bufio"
	"context"
	"crypto/rand"
	"errors"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/gotd/td/telegram"
	"github.com/gotd/td/telegram/auth"
	"github.com/gotd/td/telegram/auth/qrlogin"
	"github.com/gotd/td/tg"
	"github.com/gotd/td/tgerr"
	"github.com/joho/godotenv"
	"github.com/skip2/go-qrcode"
)

func main() {
	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	d := tg.NewUpdateDispatcher()
	loggedIn := qrlogin.OnLoginToken(d)

	if err := godotenv.Load(); err != nil && !os.IsNotExist(err) {
		fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: %w", err)
	}

	sessionStorage := &telegram.FileSessionStorage{
		Path: "session.json",
	}

	client, err := telegram.ClientFromEnvironment(telegram.Options{
		UpdateHandler:  d,
		SessionStorage: sessionStorage,
	})

	if err != nil {
		fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ .env: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä auth.Client —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º rand.Reader
	authClient := auth.NewClient(client.API(), rand.Reader, 29708230, "428ef65a36ade933259c4c832cd65bfd")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	if err := client.Run(ctx, func(ctx context.Context) error {
		qr := client.QR()

		// –û–±—ä—è–≤–ª—è–µ–º authorization –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
		var authorization *tg.AuthAuthorization
		var err error

		// –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ QR-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		authorization, err = qr.Auth(ctx, loggedIn, func(ctx context.Context, token qrlogin.Token) error {
			qrData := token.URL()

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º QR-–∫–æ–¥
			qrString, err := qrcode.New(qrData, qrcode.Medium)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %w", err)
			}

			fmt.Println("\nüîπ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ Telegram:\n")
			fmt.Println(qrString.ToSmallString(false))
			fmt.Printf("\nüîó –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é: %s\n", qrData)

			return nil
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ SESSION_PASSWORD_NEEDED
		if err != nil {
			if tgerr.Is(err, "SESSION_PASSWORD_NEEDED") {
				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				password, inputErr := promptPassword()
				if inputErr != nil {
					return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: %w", inputErr)
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ Password –∏–∑ –ø–∞–∫–µ—Ç–∞ auth –∏ –æ–±–Ω–æ–≤–ª—è–µ–º authorization
				authorization, err = authClient.Password(ctx, password)
				if err != nil {
					if errors.Is(err, auth.ErrPasswordInvalid) {
						return fmt.Errorf("–≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
					}
					return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: %w", err)
				}
			} else {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %w", err)
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		u, ok := authorization.User.AsNotEmpty()
		if !ok {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %T", authorization.User)
		}

		fmt.Println("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
		fmt.Printf("ID: %d | Username: %s | –ë–æ—Ç: %t\n", u.ID, u.Username, u.Bot)
		return nil
	}); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", err)
	}
}

// promptPassword –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å 2FA
func promptPassword() (string, error) {
	fmt.Print("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
	reader := bufio.NewReader(os.Stdin)
	password, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(password), nil
}
