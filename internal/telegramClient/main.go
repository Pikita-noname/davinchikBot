package telegramclient

import (
	"context"
	"crypto/rand"
	"errors"
	"fmt"
	"log"
	"os"

	"github.com/gotd/td/telegram"
	"github.com/gotd/td/telegram/auth"
	"github.com/gotd/td/telegram/auth/qrlogin"
	"github.com/gotd/td/tg"
	"github.com/gotd/td/tgerr"
	"github.com/joho/godotenv"
	"github.com/rivo/tview"
	"github.com/skip2/go-qrcode"
)

type ViewApp interface {
	GetViewApp() *tview.Application
	NewPasswordRequest(onSubmit func(password string)) *tview.Flex
	BackToMain()
}

func Run(qrView *tview.TextView, app ViewApp) {
	ctx := context.Background()

	viewApp := app.GetViewApp()

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	d := tg.NewUpdateDispatcher()
	loggedIn := qrlogin.OnLoginToken(d)

	if err := godotenv.Load(); err != nil && !os.IsNotExist(err) {
		fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: %w", err)
	}

	sessionStorage := &telegram.FileSessionStorage{
		Path: "session.json",
	}

	client, err := telegram.ClientFromEnvironment(telegram.Options{
		UpdateHandler:  d,
		SessionStorage: sessionStorage,
	})

	if err != nil {
		fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ .env: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä auth.Client —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º rand.Reader
	authClient := auth.NewClient(client.API(), rand.Reader, 29708230, "428ef65a36ade933259c4c832cd65bfd")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	if err := client.Run(ctx, func(ctx context.Context) error {
		qr := client.QR()

		// –û–±—ä—è–≤–ª—è–µ–º authorization –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
		var authorization *tg.AuthAuthorization
		var err error

		// –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ QR-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		authorization, err = qr.Auth(ctx, loggedIn, func(ctx context.Context, token qrlogin.Token) error {
			qrData := token.URL()

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º QR-–∫–æ–¥
			qr, err := qrcode.New(qrData, qrcode.Medium)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %w", err)
			}

			viewApp.QueueUpdateDraw(func() {
				qrView.SetText(qr.ToSmallString(false))
			})

			return nil
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ SESSION_PASSWORD_NEEDED
		if err != nil {
			if tgerr.Is(err, "SESSION_PASSWORD_NEEDED") {

				passwordChan := make(chan string)

				viewApp.QueueUpdateDraw(func() {
					log.Println("üì¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")

					viewApp.SetRoot(app.NewPasswordRequest(func(password string) {
						log.Println("üìù –í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
						app.BackToMain()
						passwordChan <- password
					}), true)

				})

				password := <-passwordChan

				authorization, err = authClient.Password(ctx, password)
				if err != nil {
					if errors.Is(err, auth.ErrPasswordInvalid) {
						log.Println("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
					} else {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–º: %v", err)
					}
				} else {
					log.Println("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!")
				}
			}
		}

		if authorization == nil {
			return nil
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		u, ok := authorization.User.AsNotEmpty()
		if !ok {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %T", authorization.User)
		}

		fmt.Println("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
		fmt.Printf("ID: %d | Username: %s | –ë–æ—Ç: %t\n", u.ID, u.Username, u.Bot)
		return nil
	}); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", err)
	}
}
